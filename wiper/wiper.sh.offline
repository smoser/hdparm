#!/bin/bash
#
# First cut at an off-line SATA SSD TRIM utility.
#
# Copyright (C) 2009 Mark Lord.  All rights reserved.
#
# Requires gawk, dumpe2fs, and hdparm >= 9.17.
# This could all be rewritten as a single, 64-bit safe, standalone C-executable.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License Version 2,
# as published by the Free Software Foundation.
# 
# This program is distributed in the hope that it would be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

if [ $# -eq 0 ]; then
	echo >&2
	echo "SATA SSD TRIM/wiper utility for unmounted (r/o) filesystems" >&2
	echo "Usage:  $0 <filesystem_device>" >&2
	echo >&2
	exit 1
fi

DUMPE2FS=/sbin/dumpe2fs
GAWK=/usr/bin/gawk
HDPARM=/sbin/hdparm
GREP=/bin/grep
ID=/usr/bin/id

for prog in $DUMPE2FS $GAWK $HDPARM $GREP ; do
	if [ ! -x $prog ]; then
		echo "$prog: needed but not found, aborting."
		exit 1
	fi
done

HDPVER=`$HDPARM -V | $GAWK '{gsub("[^0-9.]","",$2); if ($2 > 0) print ($2 * 100); else print 0; exit(0)}'`
if [ $HDPVER -lt 917 ]; then
	echo "$HDPARM: version >= 9.17 is required, aborting." >&2
	exit 1
fi

if [ `$ID -u` -ne 0 ]; then
	echo "You must be the super-user for this (try \"sudo $0\" instead), aborting." >&2
	exit 1
fi

maxargs=1
if [ "$1" = "--commit" ]; then
	shift
	commit=yes
elif [ "$2" = "--commit" ]; then
	commit=yes
	maxargs=2
fi

if [ $# -gt $maxargs ]; then
	echo "Too many parameters, aborting." >&2
	exit 1
fi
 
dev="$1"
if [ "$dev" = "" ]; then
	[ -x /bin/ls ] && dev="`/bin/ls -1 /dev/sd[a-z][1-9] 2>/dev/null | head -1`"
	[ "$dev" = "" ] && dev="/dev/sda1"
	echo "${0##*/}: missing block device parameter (eg. \"$dev\"), aborting." >&2
	exit 1
fi

if [ ! -b "$dev" ]; then
	echo "$dev: not a block device" >&2
	exit 1
fi

$DUMPE2FS "$dev" &>/dev/null
if [ $? -ne 0 ]; then
	echo "$DUMPE2FS $dev failed: this works only for ext2/ext3/ext4 filesystems, aborting." >&2
	exit 1
fi

if [ "$commit" = "yes" ]; then
	if $GREP "^$dev  *[^ ][^ ]*  *[^ ][^ ]* rw" /proc/mounts &>/dev/null ; then
		echo "$dev: currently mounted read-write, aborting." >&2
		exit 1
	fi
	echo > /dev/tty
	echo -n "This script could destroy your data.  Are you sure (y/N)? " >/dev/tty
	read yn < /dev/tty
	if [ "$yn" != "y" -a "$yn" != "Y" ]; then
		echo "Aborting." >&2
		exit 1
	fi
else
	echo
	echo "This will be a DRY-RUN only.  Use --commit to do it for real."
	echo
fi

echo -n "Syncing disks.. "
sync
echo

fsoffset=`$HDPARM -g "$dev" | $GAWK 'END {print \$NF}'`
rdev=`echo $dev | $GAWK '{print gensub("[0-9]*$","","g")}'`

$DUMPE2FS "$dev" 2>/dev/null | $GAWK -v hdparm="$HDPARM" -v rdev="$rdev" -v fsoffset="$fsoffset" -v commit="$commit" '

function do_trim (  rc,trim) {
	trim = hdparm " --trim-sector-ranges "
	print trim "(" nsectors " sectors) " rdev
	trim=trim ranges "--please-destroy-my-drive " rdev
	if (commit == "yes") {
		fflush()
		rc = system(trim " > /dev/null")
	}
	ranges = ""
	nranges = 0
	nsectors = 0
	return rc
}

/^Group 0:/{
	++ok
}
/^Block size: *[0-9]/{
	blksects = $NF / 512	## FIXME someday
	++ok
}

/^  Free blocks: [0-9]/{
	if (ok == 2) {
		#print $0
		n = split(substr($0,16),f,",*  *")
		for (i = 1; i <= n; ++i) {
			if (f[i] ~ "^[0-9][0-9]*-[0-9][0-9]*$") {
				split(f[i],b,"-")
				#printf "[%u]: %s-%s\n", i, b[1], b[2]
				lba = (b[1] * blksects) + fsoffset
				count = (b[2] - b[1] + 1) * blksects
				while (count > 0) {
					this_count = (count > 65532) ? 65532 : count
					ranges = ranges lba ":" this_count " "
					nranges++
					nsectors += this_count
					lba   += this_count
					count -= this_count
					if (nranges >= (64 * 512 / 8) || nsectors > 4000000) {
						rc = do_trim()
						if (rc)
							exit rc
					}
				}
			}
		}
		#print " "
	}
}
END {
	if (rc == 0 && nranges > 0)
		do_trim()
	print "Done."
	exit 0
}'
